<Kubernetes Native - Wordpress 애플리케이션 구축>

본 프로젝트는 Wordpress 애플리케이션을 구현하는 프로젝트이다.
프로젝트의 환경은 1대의 마스터와 2대의 노드를 구성하였으며, 
마스터는 개의 vCPU와  GB의 Memory를 배정하였으며, 노드의 경우에는 개의 vCPU와  GB의 Memory를 배정하였다.


프로젝트의 구현 순서는 Mysql 이미지를 이용해 데이터베이스 부분을 먼저 완성하고, wordpress 부분을 구현하였다.
각 부분의 내부적 구현 순서는 pvc 스토리지 클래스, Pod Object, HPA이며 최종적으로 서비스를 구성하였다.

[데이터베이스 영역]

1. PVC: StorageClass(rbd)
동적 볼륨을 위한 스토리지 클래스 설정은 다음과 같음

# rook git download
git clone --single-branch --branch release-1.2 https://github.com/rook/rook.git

# access the directory
cd ~/rook/cluster/examples/kubernetes/ceph

# rook-ceph deploy
kubectl create -f common.yaml
kubectl create -f operator.yaml

# rook-ceph-operator 파드가 running 상태가 될 때 까지 기다림
kubectl -n rook-ceph get pod

# 단일노드일 경우 cluster-test.yaml 생성
kubectl create -f cluster-test.yaml

# ceph toolbox pod
kubectl create -f toolbox.yaml


# storage class 생성
kubectl create -f csi/rbd/storageclass-test.yaml
kubectl get storageclasses.storage.k8s.io

# cephfs 생성
kubectl create -f filesystem-test.yaml
kubectl -n rook-ceph get pod -l app=rook-ceph-mds

# cephfs 스토리지 클래스 생성
kubectl create -f csi/cephfs/storageclass.yaml
kubectl get storageclasses.storage.k8s.io


나머지 DB를 호출하는 부분은 Pod Object에서 내부적으로 구현해야함.









2. ConfigMap 등록
Statefulset의 구현을 위해서는 configMap을 구현해야 한다.


mydb-config.yml의 정의
>
apiVersion: v1
kind: ConfigMap
metadata:
  name: mydb-config
  labels:
    app: mydb
data:
  master.cnf: |
    [mysqld]
    log-bin
  slave.cnf: |
    [mysqld]
    super-read-only

실행
$ kubectl create -f mydb-config.yml





3. 내부 Pod간 통신을 위한 서비스 구축


mydb-svc-read.yml의 정의
>
apiVersion: v1
kind: Service
metadata:
  name: mydb-read
  labels:
    app: mydb
spec:
  ports:
  - name: mysql
    port: 3306
  selector:
    app: mydb

실행
kubectl create -f mydb-svc-read.yml





mydb-svc-write.yml의 정의
>
apiVersion: v1
kind: Service
metadata:
  name: mydb
  labels:
    app: mydb
spec:
  ports:
  - name: mysql
    port: 3306
  clusterIP: None
  selector:
    app: mydb

실행
kubectl create -f mydb-svc-write.yml 




4. Statefulset: Mysql(Replica:2, Liveness, Readiness)

mydb-sts.yml의 정의
>
실행
kubectl create -f mydb-sts.yml


5. HPA: Statefulset 

mydb-hpa.yml 정의
>
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: mywd-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mywd-dep
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80

실행
kubectl create -f mydb-hpa.yml




[wordpress 부분]


1. PVC: StorageClass(cephfs)

wordpress의 pvc를 위해 storageClass를 정의함

mywd-pvc-cephfs의 정의
>
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mywd-pvc-cephfs
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
  storageClassName: csi-cephfs

실행
kubectl create -f mywd-pvc-cephfs.yml





2. Deployment: Wordpress(Replica:2, Liveness, Readiness)

mywd-dep.yml 정의
>
kubectl create -f mywd-dep.yml




3. HPA: Deployment


mywd-hpa.yml 정의
>
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: mywd-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mywd-dep
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 70

실행
kubectl create -f mywd-hpa.yml



[Service 부분]

1. Service: Headless

wd와 db의 pod를 연동하기 위한 headless를 별도로 만들었음

mydb-svc-headless.yml 정의
>
apiVersion: v1
kind: Service
metadata:
  name: mydb-svc-headless
  labels:
    name: mydb-svc-headless
spec:
  clusterIP: None
  ports:
  - port: 3306
    targetPort: 3306
  selector:
    app: mydb

실행 
kubectl create -f mydb-svc-headless.yml


cf) 테스트 lb


2. Secret 등...

3. Ingress TLS Termination


[PodAff]











